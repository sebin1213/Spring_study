컴포넌트 스캔 - 자동 의존관계 주입

@ComponentScan
Component 어노테이션이 붙은 클래스들을 자동으로 빈 등록한다.
ComponentScan의 범위는 자신이 위치한 패키지 이하에서 모두 스캔한다.

@Component
@Component가 붙은 클래스는 스프링 컨테이너가 관리하는 Bean으로 등록을 하고, 
해당 객체가 주입이 될 때 객체를 생성한다.

@Autowired
의존관계를 자동으로 주입해준다


-------@Component를 통해 빈이 생성되기 이전에, @Autowired로 미리 의존관계를 파악해 두고, 빈을 생성한다
-------만약 의존관계에 있는 빈들이 생성되지 않았다면 의존관계에 있는 빈을 생성하고 @Autowired로 의존관계 자동주입--> 빈 생성


직접 의존관계 주입
@Configuration
스프링 설정정보로 인식하고, 싱글톤을 보장해준다 
스프링이 CGLIB라는 바이트코드 조작 라이브러리를 사용해서 AppConfig
클래스를 상속받은 임의의 다른 클래스를 만들고, 그 다른 클래스를 스프링 빈으로 등록한다
@Bean이 붙은 메서드마다 이미 스프링 빈이 존재하면 존재하는 빈을 반환하고, 스프링 빈이 없으면
생성해서 스프링 빈으로 등록하고 반환하는 코드가 동적으로 만들어진다.
덕분에 싱글톤이 보장되는 것이다.





@SpringBootApplication
스프링부트를 돌리는 클래스에 붙어있음
@ComponentScan이 이미 붙어있음 그래서 이거를 실행하면 자동적으로 스프링 빈이 등록되고 했던거!


@SpringBootTest 
스프링이 자동으로 스프링 컨테이너를 띄우고 컨테이어를 통합해서 테이스를 진행해줌
테스트 클래스는 특수하게 @Autowired를 허용해줌..
스프링 빈으로 등록되어서 그런 것은 아니고, JUnit과 스프링이 예외적으로 테스트를 편리하게 하도록 허용하는 기능이 있다.